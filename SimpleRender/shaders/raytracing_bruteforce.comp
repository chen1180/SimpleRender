#version 430 core
#define PI 			3.1415926535
#define MAXFLOAT	99999.99

// change these parameters for better quality (and lower framerate :-) )
#define MAXDEPTH 	5
#define NUMSAMPLES 	4
#define ROTATION	false
//prefined struct

layout(binding = 0, rgba32f) writeonly uniform image2D text;
layout (binding = 1, rgba32f) readonly uniform image2D accum_text;
layout (local_size_x = 8, local_size_y = 8) in;
uniform vec3 cameraPos;
uniform vec3 cameraLookAt;
uniform int iTime;

//
// Hash functions by Nimitz:
// https://www.shadertoy.com/view/Xt3cDn
//

uint base_hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float g_seed = 0.0;

float hash1(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    return float(n)/float(0xffffffffU);
}

vec2 hash2(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

//
// Ray trace helper functions
//

vec3 random_cos_weighted_hemisphere_direction( const vec3 n, inout float seed ) {
  	vec2 r = hash2(seed);
	vec3  uu = normalize(cross(n, abs(n.y) > .5 ? vec3(1.,0.,0.) : vec3(0.,1.,0.)));
	vec3  vv = cross(uu, n);
	float ra = sqrt(r.y);
	float rx = ra*cos(6.28318530718*r.x); 
	float ry = ra*sin(6.28318530718*r.x);
	float rz = sqrt(1.-r.y);
	vec3  rr = vec3(rx*uu + ry*vv + rz*n);
    return normalize(rr);
}

// random point on unit disk (for depth of field camera)
vec2 random_in_unit_disk(inout float seed) {
    vec2 h = hash2(seed) * vec2(1.,6.28318530718);
    float phi = h.y;
    float r = sqrt(h.x);
	return r * vec2(sin(phi),cos(phi));
}


struct Ray
{
    vec3 origin;
    vec3 direction;
};



struct IntersectInfo
{
    // surface properties
    float t;
    vec3  p;
    vec3  normal;
	
    // material properties
    int   materialType;
    vec3  albedo;
    float fuzz;
    float refractionIndex;
};
    
    
struct Sphere
{
    // sphere properties
    //data alignment is a must.
    //vec3 need to be padded as vec4 in c++ code
    float center_x,center_y,center_z;
    float radius;
    // material
    int   materialType;
    float  albedo_x,albedo_y,albedo_z;
    float fuzz;
    float refractionIndex;
};
layout(std430,binding=0) readonly buffer scene {
         //uint scene_size;
         Sphere sphereList[];
};

bool Sphere_hit(Sphere sphere, Ray ray, float t_min, float t_max, out IntersectInfo rec)
{
    vec3 oc = ray.origin - vec3(sphere.center_x,sphere.center_y,sphere.center_z);
    float a = dot(ray.direction, ray.direction);
    float b = dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;

    float discriminant = b * b - a * c;

    if (discriminant > 0.0f)
    {
        float temp = (-b - sqrt(discriminant)) / a;

        if (temp < t_max && temp > t_min)
        {
            rec.t                = temp;
            rec.p                = ray.origin + rec.t * ray.direction;
            rec.normal           = (rec.p - vec3(sphere.center_x,sphere.center_y,sphere.center_z)) / sphere.radius;
            rec.materialType     = sphere.materialType;
            rec.albedo           =vec3(sphere.albedo_x,sphere.albedo_y,sphere.albedo_z);
            rec.fuzz             = sphere.fuzz;
            rec.refractionIndex  = sphere.refractionIndex;

            return true;
        }


        temp = (-b + sqrt(discriminant)) / a;

        if (temp < t_max && temp > t_min)
        {
            rec.t                = temp;
            rec.p                = ray.origin + rec.t * ray.direction;
            rec.normal           = (rec.p -  vec3(sphere.center_x,sphere.center_y,sphere.center_z)) / sphere.radius;
            rec.materialType     = sphere.materialType;
            rec.albedo           =  vec3(sphere.albedo_x,sphere.albedo_y,sphere.albedo_z);
            rec.fuzz             = sphere.fuzz;
            rec.refractionIndex  = sphere.refractionIndex;

            return true;
        }
    }

    return false;
}


// The 'scene'
//Sphere sceneList[84] = sphereList;



// Schlick's approximation for approximating the contribution of the Fresnel factor
// in the specular reflection of light from a non-conducting surface between two media
//
// Theta is the angle between the direction from which the incident light is coming and
// the normal of the interface between the two media
float schlick(float cos_theta, float n2)
{
    const float n1 = 1.0f;  // refraction index for air

    float r0s = (n1 - n2) / (n1 + n2);
    float r0 = r0s * r0s;

    return r0 + (1.0f - r0) * pow((1.0f - cos_theta), 5.0f);
}


bool refractVec(vec3 v, vec3 n, float ni_over_nt, out vec3 refracted)
{
    vec3 uv = normalize(v);

    float dt = dot(uv, n);

    float discriminant = 1.0 - ni_over_nt * ni_over_nt * (1.0f - dt * dt);

    if (discriminant > 0.0f)
    {
        refracted = ni_over_nt*(uv - n * dt) - n * sqrt(discriminant);

        return true;
    }
    else
        return false;
}


vec3 reflectVec(vec3 v, vec3 n)
{
     return v - 2.0f * dot(v, n) * n;
}





struct Camera
{
    vec3 origin;
    vec3 lowerLeftCorner;
    vec3 horizontal;
    vec3 vertical;
    vec3 u, v, w;
    float lensRadius;
};
    
    
// vfov is top to bottom in degrees
void Camera_init(out Camera camera, vec3 lookfrom, vec3 lookat, vec3 vup, float vfov, float aspect, float aperture, float focusDist)
{
    camera.lensRadius = aperture / 2.0;
    
    float theta = vfov * PI / 180.0;
    float halfHeight = tan(theta / 2.0);
    float halfWidth = aspect * halfHeight;

    camera.origin = lookfrom;

    camera.w = normalize(lookfrom - lookat);
    camera.u = normalize(cross(vup, camera.w));
    camera.v = cross(camera.w, camera.u);

    camera.lowerLeftCorner = camera.origin  - halfWidth  * focusDist * camera.u
                                            - halfHeight * focusDist * camera.v
                                            -              focusDist * camera.w;

    camera.horizontal = 2.0 * halfWidth  * focusDist * camera.u;
    camera.vertical   = 2.0 * halfHeight * focusDist * camera.v;
}


Ray Camera_getRay(Camera camera, float s, float t)
{
    vec2 rd = camera.lensRadius * random_in_unit_disk(g_seed);
    vec3 offset = camera.u * rd.x + camera.v * rd.y;

    Ray ray;

    ray.origin = camera.origin + offset;
    ray.direction = camera.lowerLeftCorner + s * camera.horizontal + t * camera.vertical - camera.origin - offset;

    return ray;
}


#define LAMBERT    0
#define METAL      1
#define DIELECTRIC 2

    

bool Material_bsdf(IntersectInfo isectInfo, Ray wo, out Ray wi, out vec3 attenuation)
{
    int materialType = isectInfo.materialType;

    if(materialType == LAMBERT)
    {
        vec3 target = isectInfo.p +random_cos_weighted_hemisphere_direction(isectInfo.normal,g_seed);

        wi.origin = isectInfo.p;
        wi.direction = target - isectInfo.p;

        attenuation = isectInfo.albedo;

        return true;
    }
    else
    if(materialType == METAL)
    {
        float fuzz = isectInfo.fuzz;

        vec3 reflected = reflect(normalize(wo.direction), isectInfo.normal);

        wi.origin = isectInfo.p;
        wi.direction = reflected + fuzz * +random_cos_weighted_hemisphere_direction(isectInfo.normal,g_seed);

        attenuation = isectInfo.albedo;

        return (dot(wi.direction, isectInfo.normal) > 0.0f);
    }
    else
    if(materialType == DIELECTRIC)
    {
        vec3 outward_normal;
        vec3 reflected = reflect(wo.direction, isectInfo.normal);

        float ni_over_nt;

        attenuation = vec3(1.0f, 1.0f, 1.0f);
        vec3 refracted;
        float reflect_prob;
        float cosine;

        float rafractionIndex = isectInfo.refractionIndex;

        if (dot(wo.direction, isectInfo.normal) > 0.0f)
        {
            outward_normal = -isectInfo.normal;
            ni_over_nt = rafractionIndex;
           
            cosine = dot(wo.direction, isectInfo.normal) / length(wo.direction);
            cosine = sqrt(1.0f - rafractionIndex * rafractionIndex * (1.0f - cosine * cosine));
        }
        else
        {
            outward_normal = isectInfo.normal;
            ni_over_nt = 1.0f / rafractionIndex;
            cosine = -dot(wo.direction, isectInfo.normal) / length(wo.direction);
        }
        if (refractVec(wo.direction, outward_normal, ni_over_nt, refracted))
            reflect_prob = schlick(cosine, rafractionIndex);
        else
            reflect_prob = 1.0f;
        if ( hash1(g_seed) < reflect_prob)
        {
            wi.origin = isectInfo.p;
            wi.direction = reflected;
        }
        else
        {
            wi.origin = isectInfo.p;
            wi.direction = refracted;
        }

        return true;
    }

    return false;
}


bool intersectScene(Ray ray, float t_min, float t_max, out IntersectInfo rec)
{
        IntersectInfo temp_rec;

        bool hit_anything = false;
        float closest_so_far = t_max;

        for (int i = 0; i < sphereList.length(); i++)
        {
            Sphere sphere = sphereList[i];

            if (Sphere_hit(sphere, ray, t_min, closest_so_far, temp_rec))
            {
                hit_anything   = true;
                closest_so_far = temp_rec.t;
                rec            = temp_rec;
            }
        }

        return hit_anything;
}


vec3 skyColor(Ray ray)
{
    vec3 unit_direction = normalize(ray.direction);
    float t = 0.5 * (unit_direction.y + 1.0);

    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}


vec3 radiance(Ray ray)
{
    IntersectInfo rec;

    vec3 col = vec3(1.0, 1.0, 1.0);

    for(int i = 0; i < MAXDEPTH; i++)
    {
        if (intersectScene(ray, 0.001, MAXFLOAT, rec))
        {
            Ray wi;
            vec3 attenuation;

            bool wasScattered = Material_bsdf(rec, ray, wi, attenuation);

            ray.origin = wi.origin;
            ray.direction = wi.direction;

            if (wasScattered)
                col *= attenuation;
            else
            {
                col *= vec3(0.0f, 0.0f, 0.0f);
                break;
            }
        }
        else
        {
            col *= skyColor(ray);
            break;
        }
    }

    return col;
}



void main()
{   

      ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
       ivec2 size = imageSize(text);
        if (pix.x >= size.x || pix.y >= size.y) {
            return;
        }
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);

    vec3 lookfrom = cameraPos;
    const vec3 lookat = cameraLookAt;
    float distToFocus = 10.0;
    float aperture = 0.1;

    if(ROTATION)
    {
        float angle = iTime / 100.0;
    	mat4 rotationMatrix = mat4(cos(angle), 0.0, sin(angle), 0.0,
                                          0.0, 1.0,        0.0, 0.0,
                                 -sin(angle),  0.0, cos(angle), 0.0,
                                         0.0,  0.0,        0.0, 1.0);
    
    	lookfrom = vec3(rotationMatrix * vec4(lookfrom, 1.0));
    }
    
    Camera camera;
    Camera_init(camera, lookfrom, lookat, vec3(0.0f, 1.0f, 0.0f), 20.0f, float(size.x) / float(size.y), aperture, distToFocus);

    g_seed = float(base_hash(floatBitsToUint(pix.xy)))/float(0xffffffffU)+iTime;

    //randState=rand;
    vec3 col = vec3(0.0, 0.0, 0.0);

    //for (int s = 0; s < NUMSAMPLES; s++)
    //{
        float u = float(pix.x + hash2(g_seed)) / float(size.x);
        float v = float(pix.y + hash2(g_seed)) / float(size.y);

        Ray r = Camera_getRay(camera, u, v);
        col = radiance(r)+imageLoad(accum_text,pix).xyz;
    //}


    //col /= float(NUMSAMPLES);
    //col = vec3( sqrt(col[0]), sqrt(col[1]), sqrt(col[2]) );

    vec4 fragColor = vec4(col, 1.0);
     imageStore(text, pix, fragColor);
}