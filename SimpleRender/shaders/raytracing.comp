#version 430 core
#define NumberOfSamples 4
#define Depth 5
layout(binding = 0, rgba32f) uniform image2D text;
uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
uniform int time;
uint base_hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float g_seed = 0.0;

float hash1(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    return float(n)/float(0xffffffffU);
}

vec2 hash2(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

//
// Ray trace helper functions
//

vec3 random_cos_weighted_hemisphere_direction( const vec3 n, inout float seed ) {
  	vec2 r = hash2(seed);
	vec3  uu = normalize(cross(n, abs(n.y) > .5 ? vec3(1.,0.,0.) : vec3(0.,1.,0.)));
	vec3  vv = cross(uu, n);
	float ra = sqrt(r.y);
	float rx = ra*cos(6.28318530718*r.x); 
	float ry = ra*sin(6.28318530718*r.x);
	float rz = sqrt(1.-r.y);
	vec3  rr = vec3(rx*uu + ry*vv + rz*n);
    return normalize(rr);
}

// random point on unit disk (for depth of field camera)
vec2 random_in_unit_disk(inout float seed) {
    vec2 h = hash2(seed) * vec2(1.,6.28318530718);
    float phi = h.y;
    float r = sqrt(h.x);
	return r * vec2(sin(phi),cos(phi));
}

struct box {
  vec3 min;
  vec3 max;
};
struct ray {
  vec3 origin;
  vec3 dir;
  float d;
};
struct sphere{
    vec3 center;
    float radius;
};
struct hittable_sphere{
    sphere s;
    box bbox;
    vec3 color;
};
struct hit_record {
  float t;
  vec3 hitPoint;
  vec3 normal;
  vec3 color;

};

#define MAX_SCENE_BOUNDS 100.0
#define NUM_BOXES 2
#define INFINITY 1e5

box getBBoxSphere(sphere s);

const box boxes[] = {
  /* The ground */
  {vec3(-5, 0.0, -5), vec3(5, 0.0, 5)},
  /* Box in the middle */
  {vec3(-0.5, 0.0, -0.5), vec3(0.5, 1.0, 0.5)}
};
const sphere spheres[]={
 {vec3(0.0, 0.0, -1), 0.5},
  /* Box in the middle */
  {vec3(0,-100.5,-1), 100}
};
const hittable_sphere hit_spheres[]={
      /* The ground */
  {spheres[0],getBBoxSphere(spheres[0]),vec3(0.5,0.5,0.5)},
  /* Box in the middle */
  {spheres[1],getBBoxSphere(spheres[1]),vec3(0.8,0.8,0.8)}
};

box getBBoxSphere(sphere s){
    vec3 diagnal=vec3(s.radius,s.radius,s.radius);
    return box(s.center-diagnal,s.center+diagnal);
}

vec2 intersectBox(vec3 origin, vec3 dir, const box b) {
  vec3 tMin = (b.min - origin) / dir;
  vec3 tMax = (b.max - origin) / dir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}
bool intersectSphere(ray r,hittable_sphere hs,double t_min, double t_max,out hit_record rec){
    sphere s=hs.s; 
    vec3 oc=r.origin-s.center;
     float a = dot(r.dir,r.dir);
    float b = 2 * dot(r.dir,oc);
    float c = dot(oc,oc) -s.radius * s.radius;
    float discriminant = (pow(b, 2) - 4 * a * c);
     if (discriminant > 0.0)
    {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        if (t<t_max && t>t_min) {
            rec.t = t;
            rec.hitPoint = r.origin+r.dir*r.d;
            rec.color=hs.color;
            vec3 normal=(rec.hitPoint - s.center) / s.radius;
            if (dot(normal,r.dir)<0.0)
                rec.normal=normal;
            else
                rec.normal=-normal;

            return true;
        }
        t = (-b + sqrt(discriminant)) / (2.0 * a);
        if (t<t_max && t>t_min) {
            rec.t = t;
            rec.hitPoint = r.origin+r.dir*r.d;
            vec3 normal=(rec.hitPoint - s.center) / s.radius;
               rec.color=hs.color;
            if (dot(normal,r.dir)<0.0)
                rec.normal=normal;
            else
                rec.normal=-normal;
            return true;
        }
    }
    return false;
}

bool intersectSpheres(ray r,double t_min, double t_max,out hit_record rec) {
   hit_record tmp_rec;
  bool found = false;
  double closed_t=t_max;
  for (int i = 0; i < NUM_BOXES; i++) {
    if(intersectSphere(r,hit_spheres[i],t_min,closed_t,tmp_rec)){
        found=true;
        closed_t=tmp_rec.t;
        rec=tmp_rec;
    }
  }
  return found;
}

vec3 make_color(in ray r, inout bool isScattered, out ray r_out,
                inout int depth) {
  // produce color if ray hits scene
  hit_record rec;
  if (intersectSpheres( r, 0.001, INFINITY, rec)) {
   isScattered = true;
   vec3 hit_point=r.origin+r.dir*rec.t; 
   vec3 target=random_cos_weighted_hemisphere_direction(rec.normal,g_seed);
   r_out.origin=hit_point;
   r_out.dir=target;
    depth--;
    return rec.color;
  }
  vec3 dir = normalize(r.dir);
  float temp = 0.5 * (dir.y + 1.0);
  isScattered = false;
  return (1.0-temp)*vec3(1.0, 1.0, 1.0) + temp*vec3(0.5, 0.7, 1.0);
}
vec3 ray_color(in ray r, int depth) {
  //
  hit_record rec;
  ray r_in;
  r_in.origin = r.origin;
  r_in.dir = r.dir;
  vec3 bcolor = vec3(1);
  int i = depth;
  while (i > 0 && i <= depth) {
    bool isScattered;
    ray r_out;
    vec3 cval = make_color(r_in, isScattered, r_out, i);
    if (i == 0) {
      bcolor *= 0;
      break;
    }
    if (isScattered == true) {
      r_in = r_out;
    } else {
      i++;
    }
    bcolor *= cval;
    // break;
  }
  return bcolor;
}

vec4 trace(ray r) {
    vec3 final_color=ray_color(r,2);
    return vec4(final_color,1.0);
 
}
layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(text);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }

  g_seed = float(base_hash(floatBitsToUint(pix.xy)))/float(0xffffffffU)+time;

   //randState=rand;
    vec4 col = vec4(0.0, 0.0, 0.0,0.0);

    for (int s = 0; s < NumberOfSamples; s++)
    {
      vec2 pos = (vec2(pix)+vec2(hash2(g_seed))) / vec2(size.x - 1, size.y - 1);
        vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);
        ray r=ray(eye,dir,0.0);
        col += trace(r);
    }

    col /= float(NumberOfSamples);
    col = vec4( sqrt(col[0]), sqrt(col[1]), sqrt(col[2]), sqrt(col[3]) );
  imageStore(text, pix, col);
}
